/// Font.cpp
/// Font values and functions for fonts

#include "Font.h"

namespace xixEngine {
	FontData Font[191] =
		{ { 32, 1019, 0, 0, 1, 0, 71, 16 }
		, { 33, 819, 180, 21, 53, -1, 11, 18 }
		, { 34, 198, 388, 30, 24, -2, 11, 25 }
		, { 35, 695, 67, 49, 57, -2, 10, 45 }
		, { 36, 872, 66, 36, 56, -2, 12, 31 }
		, { 37, 28, 299, 58, 49, -4, 15, 51 }
		, { 38, 149, 190, 49, 53, -2, 11, 44 }
		, { 39, 134, 390, 19, 26, -2, 11, 14 }
		, { 40, 298, 0, 31, 67, -2, 9, 25 }
		, { 41, 330, 0, 31, 67, -4, 9, 25 }
		, { 42, 923, 328, 34, 34, -4, 11, 27 }
		, { 43, 674, 339, 37, 37, -4, 22, 30 }
		, { 44, 72, 391, 25, 29, -4, 43, 18 }
		, { 45, 389, 385, 31, 20, -2, 31, 27 }
		, { 46, 229, 388, 23, 24, -3, 40, 18 }
		, { 47, 909, 66, 28, 56, -4, 11, 21 }
		, { 48, 131, 298, 46, 48, -3, 16, 40 }
		, { 49, 813, 287, 26, 46, -4, 17, 20 }
		, { 50, 401, 296, 41, 48, -4, 16, 33 }
		, { 51, 525, 293, 38, 48, -4, 16, 31 }
		, { 52, 564, 293, 41, 47, -3, 16, 35 }
		, { 53, 606, 293, 39, 47, -4, 17, 32 }
		, { 54, 272, 297, 42, 48, -3, 16, 35 }
		, { 55, 686, 290, 38, 47, -4, 17, 30 }
		, { 56, 485, 293, 39, 48, -4, 16, 31 }
		, { 57, 358, 296, 42, 48, -3, 16, 36 }
		, { 58, 1000, 231, 21, 37, -3, 27, 16 }
		, { 59, 840, 287, 25, 45, -6, 27, 15 }
		, { 60, 221, 347, 31, 40, -2, 21, 25 }
		, { 61, 98, 390, 35, 28, -2, 26, 30 }
		, { 62, 253, 346, 31, 40, -3, 21, 25 }
		, { 63, 750, 180, 34, 53, -4, 11, 27 }
		, { 64, 557, 129, 48, 54, -3, 10, 43 }
		, { 65, 180, 244, 52, 52, -4, 11, 44 }
		, { 66, 199, 190, 46, 53, -2, 11, 40 }
		, { 67, 653, 128, 46, 54, -3, 10, 39 }
		, { 68, 337, 243, 50, 52, -2, 11, 45 }
		, { 69, 426, 187, 41, 53, -2, 11, 36 }
		, { 70, 468, 186, 41, 53, -2, 11, 35 }
		, { 71, 505, 131, 51, 54, -3, 10, 45 }
		, { 72, 285, 243, 51, 52, -2, 11, 47 }
		, { 73, 833, 234, 23, 52, -2, 11, 19 }
		, { 74, 604, 67, 27, 60, -4, 11, 21 }
		, { 75, 388, 243, 47, 52, -2, 11, 41 }
		, { 76, 551, 186, 40, 53, -2, 11, 34 }
		, { 77, 93, 191, 55, 53, -2, 11, 52 }
		, { 78, 233, 244, 51, 52, -2, 11, 47 }
		, { 79, 397, 132, 53, 54, -3, 10, 47 }
		, { 80, 531, 240, 46, 52, -2, 11, 41 }
		, { 81, 550, 67, 53, 61, -3, 10, 47 }
		, { 82, 484, 240, 46, 52, -2, 11, 40 }
		, { 83, 332, 133, 32, 55, -3, 10, 26 }
		, { 84, 670, 237, 42, 52, -4, 11, 33 }
		, { 85, 246, 189, 46, 53, -2, 11, 43 }
		, { 86, 436, 241, 47, 52, -3, 11, 41 }
		, { 87, 908, 178, 65, 52, -3, 11, 59 }
		, { 88, 625, 238, 44, 52, -3, 11, 39 }
		, { 89, 974, 178, 47, 52, -4, 11, 39 }
		, { 90, 510, 186, 40, 53, -3, 11, 34 }
		, { 91, 381, 67, 30, 64, -1, 11, 26 }
		, { 92, 938, 66, 27, 56, -3, 11, 21 }
		, { 93, 350, 68, 30, 64, -2, 11, 26 }
		, { 94, 0, 392, 40, 31, -3, 15, 33 }
		, { 95, 457, 385, 39, 18, -5, 58, 29 }
		, { 96, 337, 386, 27, 21, -3, 9, 23 }
		, { 97, 136, 347, 43, 40, -3, 24, 37 }
		, { 98, 700, 125, 43, 54, -3, 10, 37 }
		, { 99, 40, 349, 33, 41, -3, 23, 26 }
		, { 100, 744, 125, 43, 54, -3, 10, 37 }
		, { 101, 0, 350, 39, 41, -3, 23, 32 }
		, { 102, 954, 123, 30, 54, -4, 9, 22 }
		, { 103, 315, 296, 42, 48, -4, 24, 36 }
		, { 104, 633, 183, 40, 53, -2, 10, 36 }
		, { 105, 901, 231, 22, 51, -2, 12, 17 }
		, { 106, 632, 67, 25, 60, -5, 12, 17 }
		, { 107, 293, 189, 44, 53, -2, 10, 38 }
		, { 108, 879, 231, 21, 52, -2, 11, 17 }
		, { 109, 285, 346, 59, 39, -2, 24, 55 }
		, { 110, 345, 345, 41, 39, -3, 24, 36 }
		, { 111, 180, 347, 40, 40, -3, 24, 33 }
		, { 112, 87, 298, 43, 49, -2, 24, 38 }
		, { 113, 924, 231, 42, 50, -3, 23, 37 }
		, { 114, 465, 343, 30, 39, -3, 24, 24 }
		, { 115, 982, 282, 28, 42, -3, 22, 22 }
		, { 116, 967, 231, 32, 50, -4, 14, 24 }
		, { 117, 552, 342, 41, 38, -2, 25, 37 }
		, { 118, 594, 341, 40, 38, -3, 25, 34 }
		, { 119, 496, 342, 55, 38, -4, 25, 48 }
		, { 120, 635, 341, 38, 38, -3, 25, 31 }
		, { 121, 443, 294, 41, 48, -3, 25, 34 }
		, { 122, 427, 345, 37, 39, -3, 25, 29 }
		, { 123, 696, 0, 30, 66, -3, 10, 25 }
		, { 124, 1001, 0, 17, 58, 1, 10, 20 }
		, { 125, 727, 0, 30, 66, -2, 10, 25 }
		, { 126, 154, 388, 43, 25, -4, 27, 34 }
		, { 160, 1010, 59, 10, 9, -4, 67, 8 }
		, { 161, 857, 231, 21, 52, -2, 11, 18 }
		, { 162, 725, 290, 34, 47, -4, 16, 26 }
		, { 163, 646, 291, 39, 47, -2, 17, 31 }
		, { 164, 387, 345, 39, 39, 0, 17, 38 }
		, { 165, 760, 287, 52, 46, -4, 17, 45 }
		, { 166, 362, 0, 17, 67, 0, 7, 18 }
		, { 167, 658, 67, 36, 58, -3, 10, 30 }
		, { 168, 421, 385, 35, 19, -5, 9, 23 }
		, { 169, 178, 298, 46, 48, -2, 11, 42 }
		, { 170, 866, 284, 38, 44, -4, 11, 31 }
		, { 171, 844, 333, 42, 34, -2, 24, 36 }
		, { 172, 277, 387, 30, 22, -1, 31, 29 }
		, { 173, 497, 381, 32, 18, -3, 31, 27 }
		, { 174, 225, 297, 46, 48, -2, 11, 42 }
		, { 175, 530, 381, 31, 18, -4, 13, 23 }
		, { 176, 990, 325, 32, 32, -3, 10, 26 }
		, { 177, 958, 325, 31, 34, -3, 23, 26 }
		, { 178, 712, 338, 32, 35, -4, 17, 25 }
		, { 179, 745, 338, 31, 35, -4, 17, 24 }
		, { 180, 308, 386, 28, 21, -1, 9, 23 }
		, { 181, 0, 299, 27, 50, -1, 25, 24 }
		, { 182, 789, 66, 42, 56, -3, 10, 37 }
		, { 183, 253, 387, 23, 24, -3, 24, 18 }
		, { 184, 365, 385, 23, 21, -1, 55, 23 }
		, { 185, 777, 334, 23, 35, -4, 16, 17 }
		, { 186, 905, 283, 35, 44, -3, 11, 29 }
		, { 187, 801, 334, 42, 34, -3, 24, 36 }
		, { 188, 64, 245, 61, 52, -4, 15, 54 }
		, { 189, 0, 246, 63, 52, -4, 15, 56 }
		, { 190, 841, 178, 66, 52, -4, 15, 58 }
		, { 191, 715, 180, 34, 53, -4, 11, 27 }
		, { 192, 380, 0, 52, 66, -4, -3, 44 }
		, { 193, 948, 0, 52, 65, -4, -2, 44 }
		, { 194, 433, 0, 52, 66, -4, -3, 44 }
		, { 195, 172, 68, 52, 64, -4, -1, 44 }
		, { 196, 895, 0, 52, 65, -4, -2, 44 }
		, { 197, 0, 69, 52, 65, -4, -2, 44 }
		, { 198, 29, 191, 63, 53, -4, 11, 55 }
		, { 199, 533, 0, 46, 66, -3, 10, 39 }
		, { 200, 622, 0, 41, 66, -2, -2, 36 }
		, { 201, 580, 0, 41, 66, -2, -2, 36 }
		, { 202, 256, 0, 41, 67, -2, -3, 36 }
		, { 203, 101, 68, 41, 65, -2, -1, 36 }
		, { 204, 758, 0, 28, 66, -5, -3, 19 }
		, { 205, 143, 68, 28, 65, -2, -2, 19 }
		, { 206, 664, 0, 31, 66, -5, -3, 19 }
		, { 207, 314, 68, 35, 64, -7, -1, 19 }
		, { 208, 126, 245, 53, 52, -4, 11, 45 }
		, { 209, 412, 67, 51, 63, -2, 0, 47 }
		, { 210, 155, 0, 53, 67, -3, -3, 47 }
		, { 211, 101, 0, 53, 67, -3, -3, 47 }
		, { 212, 0, 0, 53, 68, -3, -4, 47 }
		, { 213, 841, 0, 53, 65, -3, -1, 47 }
		, { 214, 787, 0, 53, 65, -3, -1, 47 }
		, { 215, 887, 329, 35, 34, -3, 24, 30 }
		, { 216, 451, 131, 53, 54, -3, 10, 47 }
		, { 217, 486, 0, 46, 66, -2, -2, 43 }
		, { 218, 209, 0, 46, 67, -2, -3, 43 }
		, { 219, 54, 0, 46, 68, -2, -4, 43 }
		, { 220, 225, 68, 46, 64, -2, 0, 43 }
		, { 221, 53, 69, 47, 65, -4, -2, 39 }
		, { 222, 578, 240, 46, 52, -2, 11, 41 }
		, { 223, 88, 135, 40, 55, -2, 11, 34 }
		, { 224, 44, 135, 43, 55, -3, 9, 37 }
		, { 225, 0, 135, 43, 55, -3, 9, 37 }
		, { 226, 966, 66, 43, 55, -3, 9, 37 }
		, { 227, 338, 189, 43, 53, -3, 11, 37 }
		, { 228, 382, 189, 43, 53, -3, 11, 37 }
		, { 229, 745, 67, 43, 57, -3, 7, 37 }
		, { 230, 74, 349, 61, 40, -3, 24, 54 }
		, { 231, 785, 180, 33, 53, -3, 23, 26 }
		, { 232, 292, 133, 39, 55, -3, 9, 32 }
		, { 233, 252, 133, 39, 55, -3, 9, 32 }
		, { 234, 832, 66, 39, 56, -3, 8, 32 }
		, { 235, 914, 123, 39, 54, -3, 10, 32 }
		, { 236, 0, 191, 28, 54, -5, 9, 17 }
		, { 237, 985, 122, 28, 54, -4, 9, 17 }
		, { 238, 365, 133, 31, 55, -6, 8, 17 }
		, { 239, 797, 234, 35, 52, -8, 11, 17 }
		, { 240, 606, 128, 46, 54, -3, 10, 37 }
		, { 241, 713, 237, 41, 52, -3, 11, 36 }
		, { 242, 211, 133, 40, 55, -3, 9, 33 }
		, { 243, 170, 134, 40, 55, -3, 9, 33 }
		, { 244, 129, 134, 40, 55, -3, 9, 33 }
		, { 245, 674, 183, 40, 53, -3, 11, 33 }
		, { 246, 592, 184, 40, 53, -3, 11, 33 }
		, { 247, 41, 391, 30, 31, -2, 22, 26 }
		, { 248, 941, 282, 40, 42, -3, 22, 33 }
		, { 249, 788, 125, 41, 54, -2, 9, 37 }
		, { 250, 872, 123, 41, 54, -2, 9, 37 }
		, { 251, 830, 123, 41, 54, -2, 9, 37 }
		, { 252, 755, 234, 41, 52, -2, 11, 37 }
		, { 253, 272, 68, 41, 64, -3, 9, 34 }
		, { 254, 464, 67, 43, 63, -2, 10, 38 }
		, { 255, 508, 67, 41, 62, -3, 11, 34 }
		};

	FontData& FindFontChar(char c) {
		auto found /*FontData *found*/ = 
		std::lower_bound(std::begin(Font), std::end(Font), c);
		if (found == std::end(Font) || c < *found) {
			found = std::lower_bound(std::begin(Font), std::end(Font), static_cast<int>('_'));
		}
		return *found;
	}

	float CalculateStringWidth(const char* text, const float TextScale) 
	{
		int advance = 0;
		for (; *text; ++text) {
			FontData& g = FindFontChar(*text);
			advance += g.advance;
		}
		return advance*TextScale;
	}
}